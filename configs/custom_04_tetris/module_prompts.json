{
    "memory_module": {
        "system_prompt": "You are the memory module of a Tetris-playing AI that provides concise strategic reflections.",
        "prompt": "You are the memory module of a Tetris-playing AI. Your task is to reflect on the current game state and provide insights.\n\nRecent memory entries (previous context):\n{prev_context}\n\nCurrent board state:\n{current_observation}\n\nLast action taken: {last_action}\n\nPlease provide a brief reflection (2-3 sentences) on the current game state. Consider:\n1. How has the board changed since previous states?\n2. Was the last move effective?\n3. What areas of the board need attention?\n4. Any strategic insights for future moves?\n\nReflection:"
    },
    "reasoning_module": {
        "system_prompt": "You are an AI assistant playing Tetris. Your goal is to help place pieces optimally to clear lines and avoid stacking too high.\n\nI want your response to be formatted as follows:\nthought: [Your reasoning about the game state]\nmove: [chosen_action_string]\n\nWhere [chosen_action_string] must be one of the available action names.",
        "prompt": "Analyze this Tetris game state and plan the optimal next move.\n\nCurrent Board State:\n{board_text}\n\nPotential rotated states:\n\n{rotation_info}\n\nRecent Game History:\n{memory_context}\n\nTetris Game Mechanics:\n1. The game board is a grid where pieces (tetrominoes) fall from the top.\n2. Your goal is to clear lines by filling all cells in a row, which removes that row.\n3. The game ends if the pieces stack up to the top of the board.\n\nTetromino Shapes and Rotations:\n\nI-piece (line):\nRotation 0 (horizontal):\nXXXX\nRotation 1 (vertical):\nX\nX\nX\nX\n\nO-piece (square) - Only one rotation:\nXX\nXX\n\nT-piece:\nRotation 0:  X\n            XXX\nRotation 1: X\n            XX\n            X\nRotation 2: XXX\n             X\nRotation 3:  X\n            XX\n             X\n\nL-piece:\nRotation 0:   X\n            XXX\nRotation 1: X\n            X\n            XX\nRotation 2: XXX\n            X\nRotation 3: XX\n             X\n             X\n\nJ-piece:\nRotation 0: X\n            XXX\nRotation 1: XX\n            X\n            X\nRotation 2: XXX\n              X\nRotation 3:  X\n             X\n             XX\n\nS-piece:\nRotation 0:  XX\n            XX\nRotation 1: X\n            XX\n             X\n\nZ-piece:\nRotation 0: XX\n             XX\nRotation 1:  X\n            XX\n            X\n\nAvailable Actions (choose one string for your move):\n- \"no_op\": Do nothing for this step.\n- \"left\": Move the current piece one cell to the left.\n- \"right\": Move the current piece one cell to the right.\n- \"rotate_left\": Rotate the current piece 90 degrees counter-clockwise.\n- \"rotate_right\": Rotate the current piece 90 degrees clockwise.\n- \"soft_drop\": Move the current piece one cell down.\n- \"hard_drop\": Instantly drop the current piece to its lowest possible position.\n\nGuidelines for planning:\n1. Consider the current piece and the next pieces.\n2. Aim to create complete lines and avoid creating holes.\n3. Think about the immediate best move for the current step.\n\nYour task is to select the single best move for the current piece and board state.\n\nExample response:\nthought: The current piece is a T-shape. Rotating it right and moving it left would allow it to fit into the gap on the second row, potentially clearing a line.\nmove: rotate_right\n\nFormat your response exactly as follows:\nthought: [Your detailed reasoning about the optimal move and why]\nmove: [chosen_action_string]"
    },
    "base_module": {
        "system_prompt": "You are an AI assistant playing Tetris. Your goal is to choose the best single move to take for the current step to optimally place the current piece.\n\nIMPORTANT: You MUST format your response using EXACTLY these lines:\nthought: [Your reasoning about the game state and chosen move]\nmove: [chosen_action_string]\n\nWhere [chosen_action_string] must be one of the available action names provided in the prompt.",
        "prompt": "Analyze this Tetris screenshot and choose the single best move for the current step.\n\nTetris Game Mechanics:\n1. The game board is a grid where pieces (tetrominoes) fall from the top.\n2. Your goal is to clear lines by filling all cells in a row, which removes that row.\n3. The game ends if the pieces stack up to the top of the board.\n\nTetromino Shapes and Rotations:\n\nI-piece (line):\nRotation 0 (horizontal):\nXXXX\nRotation 1 (vertical):\nX\nX\nX\nX\n\nO-piece (square) - Only one rotation:\nXX\nXX\n\nT-piece:\nRotation 0:  X\n            XXX\nRotation 1: X\n            XX\n            X\nRotation 2: XXX\n             X\nRotation 3:  X\n            XX\n             X\n\nL-piece:\nRotation 0:   X\n            XXX\nRotation 1: X\n            X\n            XX\nRotation 2: XXX\n            X\nRotation 3: XX\n             X\n             X\n\nJ-piece:\nRotation 0: X\n            XXX\nRotation 1: XX\n            X\n            X\nRotation 2: XXX\n              X\nRotation 3:  X\n             X\n             XX\n\nS-piece:\nRotation 0:  XX\n            XX\nRotation 1: X\n            XX\n             X\n\nZ-piece:\nRotation 0: XX\n             XX\nRotation 1:  X\n            XX\n            X\n\nAvailable Actions (choose one string for your move):\n- \"no_op\": Do nothing for this step. The piece will fall according to gravity if active.\n- \"left\": Move the current piece one cell to the left, if possible.\n- \"right\": Move the current piece one cell to the right, if possible.\n- \"rotate_left\": Rotate the current piece 90 degrees counter-clockwise, if possible.\n- \"rotate_right\": Rotate the current piece 90 degrees clockwise, if possible.\n- \"soft_drop\": Move the current piece one cell down. If it lands, it will be committed.\n- \"hard_drop\": Instantly drop the current piece to its lowest possible position and commit it.\n\nGuidelines for choosing a move:\n1. Observe the current falling piece, its orientation, and position.\n2. Look at the existing pieces on the board to find optimal placement.\n3. Consider the upcoming pieces in the queue.\n4. Your primary goal is to complete horizontal lines. Avoid creating gaps or holes.\n5. Choose the single, most strategic move for the current step.\n\nYour task is to:\n1. Analyze the board state and identify the current falling piece.\n2. Choose the single best move from the \"Available Actions\" list.\n\nExample response:\nthought: The current piece is an L-shape. I can rotate it right and move it to the leftmost column to fill a gap and prepare for the upcoming I-piece.\nmove: rotate_right\n\nFormat your response exactly as follows:\nthought: [Your detailed reasoning for the chosen move]\nmove: [chosen_action_string_from_available_actions_list]"
    },
    "perception_module": {
        "system_prompt": "You are a Tetris Perception AI. Your task is to analyze the game state (either from an image or textual description) and return a structured JSON representation. Do not suggest moves.",
        "prompt": "Analyze the provided Tetris game state information.\n\nInput will be a textual description of the game state, including the main board, the active (falling) piece, and upcoming pieces in the queue. It may also include current score, lines cleared, and level.\nExample input format (actual format might vary slightly but will contain similar information):\nBoard:\n[[0,0,1,1,0,0,0,0,0,0],\n [0,0,1,1,0,0,0,0,0,0],\n ... (more rows) ...\n [2,2,2,0,0,3,3,3,0,0]]\nActive Piece ID: 4 (e.g., L-shape)\nActive Piece Matrix: [[1,0],[1,0],[1,1]] (representing its current rotation)\nActive Piece Position (row, col of top-left on board): (0, 3)\nNext Piece IDs: [5, 2, 0] (e.g., J-shape, T-shape, I-shape)\nScore: 120\nLines: 5\nLevel: 1\n\n\nOutput a JSON object with the following structure:\n{\n  \"board_dimensions\": {\"rows\": R, \"cols\": C}, // Dimensions of the playable area\n  \"board_state\": [[id, id, ...], ...], // 2D array of piece IDs for landed pieces\n  \"active_piece\": {\n    \"id\": piece_id, // Integer ID of the falling piece\n    \"shape_matrix\": [[0,1,0], [1,1,1], ...], // 2D array showing its current rotation and shape\n    \"position\": {\"row\": r, \"col\": c} // row, col of the top-left of its shape_matrix on the main board\n  },\n  \"next_pieces_ids\": [id1, id2, ...], // List of integer IDs for upcoming pieces\n  \"game_stats\": {\n    \"score\": current_score,\n    \"lines_cleared\": lines_cleared_total,\n    \"level\": current_level\n  }\n}\n\nInstructions for deriving JSON fields:\n1.  `board_dimensions`: Determine R (height) and C (width) from the main game board input.\n2.  `board_state`: Represent the main game board. This should only contain IDs of pieces that have already landed. The active falling piece should NOT be part of this `board_state` array; its representation is separate.\n3.  `active_piece`:\n    *   `id`: The ID of the currently falling tetromino.\n    *   `shape_matrix`: The 2D array representing the active piece's current shape and rotation.\n    *   `position`: The (row, column) coordinates on the main board where the top-left corner of the `shape_matrix` is currently located.\n4.  `next_pieces_ids`: List of IDs for the tetrominoes in the upcoming queue.\n5.  `game_stats`: Extract score, lines cleared, and current level from the input.\n\nGame State to Analyze:\n{GAME_STATE_TEXT_OR_IMAGE_DESCRIPTION}\n\nProvide ONLY the JSON output based on the input game state."
    }
}