{
    "2048": {
        "memory_module": {
            "system_prompt": "You are an analytical assistant for a 2048 AI agent. \nYour task is to generate a brief, insightful reflection on the game state changes and the effectiveness of recent actions.Focus on strategic insights and patterns that would help the agent make better decisions.\nKeep your reflections short, precise, and actionable.",
            "user_prompt": "Please analyze the following 2048 game states and actions to generate a brief reflection:\n\nPrevious Game State: {json.dumps(previous_state, indent=2)}\n\nPrevious Action: {previous_action}\n\nCurrent Game State: {json.dumps(current_perception, indent=2)}\n\nLast Action: {last_action}\n\nFocus your reflection on:\n1. How the game state changed after the last action\n2. Whether the action was effective for the situation\n3. Patterns or issues to be aware of\n4. Any strategic insights for future actions\n\nKeep your reflection under 100 words and focus only on the most important insights."
        },
        "reasoning_module": {
            "system_prompt": "You are an intelligent AI player playing the 2048 game. Your goal is to make strategic moves to combine tiles and reach the highest possible tile value.\n\nIMPORTANT: You MUST format your response using EXACTLY these lines:\nthought: [Your reasoning about the game state]\nmove: [move]\n\nWhere [move] must be one of: \"up\", \"down\", \"left\", or \"right\".\nDo not include # or any other prefix. Start directly with \"thought:\" followed by your analysis.",
            "user_prompt": "2048 Game Quick Guide:\nPrimary Goal: Combine like tiles to create tiles with higher values.\nUltimate Goal: Create a tile with the value 2048 or higher.\n\nGame Mechanics:\n- The game is played on a 4x4 grid.\n- Each move (up, down, left, right) shifts all tiles in that direction.\n- Tiles with the same value that collide during a move combine into a single tile with twice the value.\n- After each move, a new tile (2 or 4) appears in a random empty cell.\n- The game ends when there are no valid moves left.\n\nKey Strategies:\n1. Build a stable structure - Keep your highest value tiles in a corner.\n2. Maintain a clear path - Always have a direction where you can combine tiles.\n3. Chain reactions - Set up sequences of merges that can happen in a single move.\n4. Look ahead - Think about the consequences of your moves 2-3 steps ahead.\n5. Building patterns - Common patterns include:\n   - Snake/Zig-zag pattern: Arrange tiles in decreasing order in a zigzag.\n   - Corner anchoring: Keep the highest tile in a corner and build around it.\n\nAvoid:\n- Getting high-value tiles stuck in the middle of the board\n- Creating scattered small values that block potential merges\n- Making moves that could lead to grid lock\n\nYour response format should contain:\n1. thought: [Your reasoning about the game state and planned action]\n2. move: [move]\n\nExample responses:\n- thought: I see several opportunities to merge tiles. Moving right would combine the two 4s in row 2, creating an 8. This also maintains my highest tiles on the right edge.\n  move: right\n\n- thought: The board is getting crowded. Moving up would consolidate several tiles and create a clear path at the bottom for new tiles.\n  move: up\n\n- thought: I need to maintain my corner strategy. Moving down would keep my 64 and 32 tiles anchored in the bottom-right corner and potentially create merge opportunities.\n  move: down\n\nFocus on making strategic decisions that maximize your score and maintain a well-organized board.\n\nI'll provide both perception data and a visual board image to help you decide the best move.\n\nPERCEPTION DATA:\n{json.dumps(current_perception, indent=2)}\n\nMEMORY CONTEXT:\n{memory_context}\n\nThe board image is also provided for visual reference. Please analyze both the perception data and the board image to determine the best move.\n\nBased on this combined information, what move should be taken next?\n\nIMPORTANT - FORMAT YOUR RESPONSE EXACTLY LIKE THIS:\nthought: [your analysis here]\nmove: [move]\n\nWhere [move] must be one of: \"up\", \"down\", \"left\", or \"right\".\nDo NOT use # or any other prefix. Start directly with \"thought:\" followed by your analysis."
        },
        "base_module": {
            "system_prompt": "You are an intelligent AI player playing the 2048 game. Your goal is to make strategic moves to combine tiles and reach the highest possible tile value.\n\nIMPORTANT: You MUST format your response using EXACTLY these lines:\nthought: [Your reasoning about the game state]\nmove: [move]\n\nWhere [move] must be one of: \"up\", \"down\", \"left\", or \"right\".\nDo not include # or any other prefix. Start directly with \"thought:\" followed by your analysis.",
            "user_prompt": "2048 Game Quick Guide:\nPrimary Goal: Combine like tiles to create tiles with higher values.\nUltimate Goal: Create a tile with the value 2048 or higher.\n\nGame Mechanics:\n- The game is played on a 4x4 grid.\n- Each move (up, down, left, right) shifts all tiles in that direction.\n- Tiles with the same value that collide during a move combine into a single tile with twice the value.\n- After each move, a new tile (2 or 4) appears in a random empty cell.\n- The game ends when there are no valid moves left.\n\nAction Space:\nYou must select one of these 4 moves:\n- up: Shift all tiles upward\n- down: Shift all tiles downward\n- left: Shift all tiles to the left\n- right: Shift all tiles to the right\n\nKey Strategies:\n1. Build a stable structure - Keep your highest value tiles in a corner.\n2. Maintain a clear path - Always have a direction where you can combine tiles.\n3. Chain reactions - Set up sequences of merges that can happen in a single move.\n4. Look ahead - Think about the consequences of your moves 2-3 steps ahead.\n5. Building patterns - Common patterns include:\n   - Snake/Zig-zag pattern: Arrange tiles in decreasing order in a zigzag.\n   - Corner anchoring: Keep the highest tile in a corner and build around it.\n\nAvoid:\n- Getting high-value tiles stuck in the middle of the board\n- Creating scattered small values that block potential merges\n- Making moves that could lead to grid lock\n\nYour response format should contain:\n1. thought: [Your reasoning about the game state]\n2. move: [move]\n\nExample responses:\n- thought: I see several opportunities to merge tiles. Moving right would combine the two 4s in row 2, creating an 8. This also maintains my highest tiles on the right edge.\n  move: right\n\n- thought: The board is getting crowded. Moving up would consolidate several tiles and create a clear path at the bottom for new tiles.\n  move: up\n\n- thought: I need to maintain my corner strategy. Moving down would keep my 64 and 32 tiles anchored in the bottom-right corner and potentially create merge opportunities.\n  move: down\n\nPlease analyze the 2048 board in the image and determine the best move.\n\n{board_features}\n\nKey considerations:\n- Look for opportunities to merge similar tiles\n- Maintain your highest tiles in a corner\n- Keep space for new tiles to appear\n- Avoid trapping high-value tiles in the middle\n\nIMPORTANT - FORMAT YOUR RESPONSE EXACTLY LIKE THIS:\nthought: [your analysis here]\nmove: [move]\n\nWhere [move] must be one of: \"up\", \"down\", \"left\", or \"right\".\nDo NOT use # or any other prefix. Start directly with \"thought:\" followed by your analysis."
        }
    },
    "tetris": {
        "memory_module": {
            "system_prompt": "You are the memory module of a Tetris-playing AI that provides concise strategic reflections.",
            "user_prompt": "You are the memory module of a Tetris-playing AI. Your task is to reflect on the current game state and provide insights.\n\nRecent memory entries:\n{memory_context}\n\nCurrent board state:\n{board_text}\n\nLast action taken: {last_action if last_action is not None else \"None\"}\n\nPlease provide a brief reflection (2-3 sentences) on the current game state. Consider:\n1. How has the board changed since previous states?\n2. Was the last move effective?\n3. What areas of the board need attention?\n4. Any strategic insights for future moves?\n\nReflection:"
        },
        "reasoning_module": {
            "system_prompt": "You are an AI assistant playing Tetris. Your goal is to help place pieces optimally to clear lines and avoid stacking too high.\n\nI want your response to be formatted as follows:\nthought: [Your reasoning about the game state]\naction_sequence: [list of action indices]\n\nThe action sequence should be a list of integers representing the moves to make.",
            "user_prompt": "Analyze this Tetris game state and plan an optimal action sequence.\n\nCurrent Board State:\n{board_text}\n\nPotential rotated states:\n\n{rotation_info}\n\nRecent Game History:\n{memory_context}\n\nTetris Game Mechanics:\n1. The game board is a grid where pieces (tetrominoes) fall from the top.\n2. Your goal is to clear lines by filling all cells in a row, which removes that row.\n3. The game ends if the pieces stack up to the top of the board.\n\nAvailable Actions:\n0: move_left - Move piece one cell to the left\n1: move_right - Move piece one cell to the right\n2: move_down - Move piece one cell down\n3: rotate_clockwise - Rotate piece 90 degrees clockwise\n4: rotate_counterclockwise - Rotate piece 90 degrees counterclockwise\n5: hard_drop - Drop piece to the bottom instantly\n6: swap - Swap with held piece (if available)\n7: no_operation - Do nothing\n\nGuidelines for planning:\n1. Start with any necessary rotations (action 3 or 4)\n2. Then position the piece horizontally (actions 0 and 1)\n3. Finally, either let it drop gradually (action 2) or use hard drop (action 5)\n4. Your sequence should be complete until the piece is placed\n\nYour task is to plan a complete action sequence that will:\n1. Rotate the active piece to the optimal orientation\n2. Move it to the optimal position\n3. Drop it into place\n\nThe sequence should be a list of action indices (0-7) that completely handles the current piece.\nExample: [3, 3, 1, 1, 2, 2, 2, 2, 2] (rotate twice, move right twice, then move down until placed)\n\nFormat your response exactly as follows:\nthought: [Your detailed reasoning about the optimal placement and why]\naction_sequence: [list of action indices]\n\nMake sure your action sequence is comprehensive and includes all steps needed."
        },
        "base_module": {
            "system_prompt": "You are an AI assistant playing Tetris. Your goal is to plan a sequence of actions to optimally place the current piece.\n\nI want your response to be formatted as follows:\nthought: [Your reasoning about the game state]\naction_sequence: [List of action indices]\n\nYour action sequence should include all necessary rotations, movements, and drops to place the current piece.",
            "user_prompt": "Analyze this Tetris screenshot and plan an optimal action sequence.\n\nTetris Game Mechanics:\n1. The game board is a grid where pieces (tetrominoes) fall from the top.\n2. Your goal is to clear lines by filling all cells in a row, which removes that row.\n3. The game ends if the pieces stack up to the top of the board.\n\nAvailable Actions:\n0: move_left - Move piece one cell to the left\n1: move_right - Move piece one cell to the right\n2: move_down - Move piece one cell down\n3: rotate_clockwise - Rotate piece 90 degrees clockwise\n4: rotate_counterclockwise - Rotate piece 90 degrees counterclockwise\n5: hard_drop - Drop piece to the bottom instantly\n6: swap - Swap with held piece (if available)\n7: no_operation - Do nothing\n\nTetris Piece Rotations:\nI-piece (line):\nRotation 0: IIII\nRotation 1: I\n           I\n           I\n           I\n\nO-piece (square):\nOnly one rotation: OO\n                   OO\n\nT-piece:\nRotation 0:  T\n            TTT\nRotation 1: T\n            TT\n            T\nRotation 2: TTT\n             T\nRotation 3:  T\n            TT\n            T\n\nL-piece:\nRotation 0:   L\n             LLL\nRotation 1: L\n            L\n            LL\nRotation 2: LLL\n            L\nRotation 3: LL\n             L\n             L\n\nJ-piece:\nRotation 0: J\n            JJJ\nRotation 1: JJ\n            J\n            J\nRotation 2: JJJ\n              J\nRotation 3:  J\n             J\n             JJ\n\nS-piece:\nRotation 0:  SS\n            SS\nRotation 1: S\n            SS\n             S\n\nZ-piece:\nRotation 0: ZZ\n             ZZ\nRotation 1:  Z\n            ZZ\n            Z\n\nGuidelines for planning:\n1. Start with any necessary rotations (action 3 or 4)\n2. Then position the piece horizontally (actions 0 and 1)\n3. Finally, either let it drop gradually (action 2) or use hard drop (action 5)\n4. Your sequence should be complete until the piece is placed\n\nYour task is to:\n1. Analyze the board state and identify the current falling piece\n2. Plan a complete action sequence that will:\n   - Rotate the active piece to the optimal orientation\n   - Move it to the optimal position\n   - Drop it into place\n\nThe sequence should be a list of action indices (0-7) that completely handles the current piece.\nExample: [3, 3, 1, 1, 2, 2, 2, 2, 2] (rotate twice, move right twice, then move down until placed)\n\nFormat your response exactly as follows:\nthought: [Your detailed reasoning about the optimal placement and why]\naction_sequence: [list of action indices]\n\nMake sure your action sequence is comprehensive and includes all steps needed."
        }
    },
    "candy_crush": {
        "memory_module": {
            "system_prompt": "You are an analytical assistant for a Candy Crush AI agent. Generate a brief, insightful reflection on the game state changes and the effectiveness of recent actions. Focus on strategic insights and patterns that would help the agent make better decisions.",
            "user_prompt": "Please analyze the following Candy Crush game states and actions to generate a brief reflection:\n\nPrevious Game State:\n{json.dumps(previous_state, indent=2)}\n\nPrevious Action: {str(previous_action)}\n\nCurrent Game State:\n{json.dumps(current_perception, indent=2)}\n\nLast Action: {str(last_action)}\n\nFocus your reflection on:\n1. How the game state changed after the last action\n2. Whether the action was effective (created matches or opened opportunities)\n3. The current state of potential matches\n4. Any strategic insights for future actions\n\nKeep your reflection under 100 words and focus only on the most important insights."
        },
        "reasoning_module": {
            "system_prompt": "You are an AI assistant playing Candy Crush. Your goal is to find the best move that will create matches of 3 or more identical candies.\n\nI want your response to be formatted as follows:\nthought: [Your reasoning about the game state]\nmove: ((row1, col1), (row2, col2))\n\nThe move should be a valid swap between two adjacent tiles that creates a match.",
            "user_prompt": "Analyze this Candy Crush game state and find the best move.\n\nCurrent board state:\n{board_repr}\n\nRecent game history:\n{memory_context}\n\nYour task is to select the best move based on the current board state and available matches.\nConsider the following criteria:\n1. Prefer moves that create matches of 4 or 5 candies over matches of 3\n2. Prefer moves that might create cascading matches\n3. Avoid moves that have been tried recently without success\n\nRules:\n1. You can only swap adjacent candies (up, down, left, right - no diagonals)\n2. A valid move must create at least one match of 3 or more identical candies\n3. Matches can be horizontal or vertical lines (not diagonal)\n4. Prefer moves that create matches of 4 or 5 candies over matches of 3\n5. Consider moves that might create cascading matches\n\nFormat your response exactly as follows:\nthought: [Your reasoning about which move is best and why]\nmove: ((row1, col1), (row2, col2))\n\nCoordinates must be integers representing valid positions on the board. The move must be adjacent tiles."
        },
        "base_module": {
            "system_prompt": "You are an AI assistant playing Candy Crush. Your goal is to find the best move that will create matches of 3 or more identical candies.\n\nI want your response to be formatted as follows:\nthought: [Your reasoning about the game state]\nmove: ((row1, col1), (row2, col2))\n\nThe move should be a valid swap between two adjacent tiles that creates a match.",
            "user_prompt": "Analyze this Candy Crush board image and find the best move.\n\nAnalyze the current Candy Crush board state shown in the image.\n\nYour task is to identify and suggest the best move by finding two adjacent candy tiles to swap that will create a match of 3 or more identical candies.\n\nRules:\n1. You can only swap adjacent candies (up, down, left, right - no diagonals)\n2. A valid move must create at least one match of 3 or more identical candies\n3. Matches can be horizontal or vertical lines (not diagonal)\n4. Prefer moves that create matches of 4 or 5 candies over matches of 3\n5. Consider moves that might create cascading matches\n\nBased on your analysis, identify the coordinates of two adjacent candies to swap.\nCoordinates are in (row, column) format, with (0,0) at the top-left corner.\n\nFormat your response exactly as follows:\nthought: [Your detailed reasoning about which move is best and why]\nmove: ((row1, col1), (row2, col2))\n\nMake sure your coordinates are integers representing valid positions on the visible board.\nThe candies to swap MUST be adjacent.\n\nBased on the current game state in the image, what is the best move you can make?"
        }
    },
    "super_mario_bros": {
        "perception_module": {
            "system_prompt": "You are a computer vision system analyzing frames from Super Mario Bros.",
            "user_prompt": "Analyze this Super Mario Bros frame with the 5x5 grid overlay and identify game elements in each grid cell.\n                Your task is to identify and locate game elements in a 5x5 grid overlay on the screen.\n            \n                Identify the following elements and their approximate positions in (x,y) grid coordinates:\n                - Mario (player character)\n                - Pipes (green obstacles)\n                - Goombas (brown mushroom enemies)\n                - Koopas (turtle enemies)\n                - Gaps/pits (areas where Mario can fall)\n                - Question blocks (blocks with ? that can be hit)\n                - Brick blocks (breakable blocks)\n                - Coins\n                - Power-ups (if visible)\n                - Flag pole (end of level)\n\n                IMPORTANT: Use a 5x5 grid system where (0,0) is the top-left corner and (4,4) is the bottom-right.\n                        \n                Your response must be in valid JSON format with the following structure:\n                {\n                \"mario\": {\"x\": int, \"y\": int},\n                \"environment\": {\n                    \"pipes\": [{\"x\": int, \"y\": int, \"height\": \"small|medium|large\"}],\n                    \"goombas\": [{\"x\": int, \"y\": int, \"distance\": \"very_close|close|medium|far\"}],\n                    \"koopas\": [{\"x\": int, \"y\": int, \"distance\": \"very_close|close|medium|far\"}],\n                    \"gaps\": [{\"x\": int, \"width\": \"small|medium|large\"}],\n                    \"question_blocks\": [{\"x\": int, \"y\": int}],\n                    \"brick_blocks\": [{\"x\": int, \"y\": int}],\n                    \"coins\": [{\"x\": int, \"y\": int}],\n                    \"power_ups\": [{\"x\": int, \"y\": int, \"type\": \"mushroom|flower|star\"}],\n                    \"flag_pole\": {\"x\": int, \"y\": int} or null\n                },\n                \"game_state\": {\n                    \"scroll_direction\": \"right|left|stationary\",\n                    \"mario_state\": \"small|big|fire|invincible\",\n                    \"immediate_threats\": [\"goomba\"|\"koopa\"|\"gap\"|\"pipe\"],\n                    \"obstacles_ahead\": [\"goomba\"|\"koopa\"|\"gap\"|\"pipe\"]\n                }\n                }\n\n                Ensure all coordinates are integers within the 0-4 range for the 5x5 grid.\n                If an element is not present, include it as an empty array or null as appropriate.\n                For immediate_threats, only include elements that pose an immediate danger to Mario."
        },
        "memory_module": {
            "system_prompt": "You are an analytical assistant for a Super Mario Bros AI agent. Our task is to generate a brief, insightful reflection on the game state changes and the effectiveness of recent actions.\nFocus on strategic insights and patterns that would help the agent make better decisions.\nKeep your reflections short, precise, and actionable.",
            "user_prompt": "Please analyze the following game states and actions to generate a brief reflection:\n\nPrevious Game State:\n{json.dumps(previous_state, indent=2)}\n\nPrevious Action: {prev_action_name} for {prev_action_frames} frames\n\nCurrent Game State:\n{json.dumps(current_perception, indent=2)}\n\nLast Action: {last_action[0]} for {last_action[1]} frames\n\nFocus your reflection on:\n1. How the game state changed after the last action\n2. Whether the action was effective for the situation\n3. Patterns or issues to be aware of\n4. Any strategic insights for future actions\n\nKeep your reflection under 100 words and focus only on the most important insights."
        },
        "reasoning_module": {
            "system_prompt": "You are an intelligent AI player playing Super Mario Bros. Your goal is to help Mario progress through the level safely and efficiently.\n\nIMPORTANT: You MUST format your response using EXACTLY these lines:\nthought: [Your reasoning about the game state]\nmove: ([action_name], frame_count)\n\nDo not include # or any other prefix. Start directly with \"thought:\" followed by your analysis.",
            "user_prompt": "Super Mario Bros Quick Guide:\nPrimary Goal: Survive as long as possible and make it to the end of the level (move right until the flag).\nSecondary Goal: Collect coins and defeat enemies when possible, and hit question mark blocks when safe.\n\nObservation Space:\n- You receive RGB images representing the current frame of the game.\n- The game runs at 30 FPS (frames per second).\n\nAction Space:\nYou may select from 7 discrete actions, each corresponding to specific button combinations:\n\n| Action Index | Button Combination    | Description                        |\n|--------------|-----------------------|------------------------------------|\n| 0            | ['NOOP']              | Do nothing                         |\n| 1            | ['right']             | Move right                         |\n| 2            | ['right', 'A']        | Move right and jump                |\n| 3            | ['right', 'B']        | Move right and run                 |\n| 4            | ['right', 'A', 'B']   | Move right, jump, and run          |\n| 5            | ['A']                 | Jump in place                      |\n| 6            | ['left']              | Move left                          |\n\nImportant: Think about future frames when deciding on actions!\n\nAction Planning:\n- For each screenshot, you need to plan actions for multiple future frames.\n- You can provide either:\n  * Short action sequence (0-15 frames): e.g., move: ([right], 15)\n  * Long action sequence (16-30 frames): e.g., move: ([right], 30)\n\nKey Strategies:\n- Approaching gaps: Be extremely cautious. Use short sequences first to prepare positioning, then commit to a jump with enough momentum.\n- Enemies: Use defensive jumps when enemies are near. If unsure, move back or jump in place.\n- Obstacles: Predict what's coming and prepare actions accordingly.\n- Speed management: Don't move too fast as unseen enemies may appear from off-screen.\n- Defensive play: When in doubt, take a defensive approach (move left or jump in place).\n\nYour response format should contain:\n1. thought: [Your reasoning about the game state and planned actions]\n2. move: ([action_name], frame_count)\n\nExample responses:\n- thought: I see a gap ahead. I need to get the right momentum before jumping.\n  move: ([right,B], 15)\n\n- thought: I see multiple enemies clustering ahead. Taking a defensive position.\n  move: ([left], 8)\n\n- thought: There's a tall pipe ahead. I need a long, high jump to clear it completely.\n  move: ([right,A,B], 30)\n\n- thought: I'm at the edge of a large gap. Need to execute a powerful jump immediately to clear it.\n  move: ([right,A,B], 30)\n\n- thought: Mario is falling down and close to the ground but not fully landed yet. I need a small frame skip before taking further actions.\n  move: ([NOOP], 5)\n\nFocus on making strategic decisions that help Mario progress through the level safely and efficiently.\nDo not discuss reward calculations in your response.\n\nHere's the current game state:\n{json.dumps(current_perception, indent=2)}\n\nMemory of recent states:\n{memory_context}\n\nBased on this information and the current image, what action should Mario take next?\n\nIMPORTANT - FORMAT YOUR RESPONSE EXACTLY LIKE THIS:\nthought: [your analysis here]\nmove: ([action_name], frame_count)\n\nDo NOT use # or any other prefix. Start directly with \"thought:\" followed by your analysis.\nOnly use available actions: [NOOP], [right], [right,A], [right,B], [right,A,B], [A], [left]\nFrame count must be between 1-30."
        },
        "base_module": {
            "system_prompt": "You are an intelligent AI player playing Super Mario Bros. Your goal is to help Mario progress through the level safely and efficiently.\n\nIMPORTANT: You MUST format your response using EXACTLY these lines:\nthought: [Your reasoning about the game state]\nmove: ([action_name], frame_count)\n\nDo not include # or any other prefix. Start directly with \"thought:\" followed by your analysis.",
            "user_prompt": "Analyze this Super Mario Bros screenshot and choose the best action to take.\n\nLook for:\n- Mario's position\n- Nearby enemies (Goombas, Koopas)\n- Pits/gaps\n- Pipes and other obstacles\n- Power-ups\n\nSuper Mario Bros Quick Guide:\nPrimary Goal: Help Mario progress through the level (move right) while avoiding hazards.\nSecondary Goal: Collect coins and power-ups when safe to do so.\n\nAction Space:\nYou may select from 7 discrete actions:\n\n| Action        | Description                        |\n|--------------|------------------------------------|\n| [NOOP]        | Do nothing                         |\n| [right]       | Move right                         |\n| [right,A]     | Move right and jump                |\n| [right,B]     | Move right and run                 |\n| [right,A,B]   | Move right, jump, and run          |\n| [A]           | Jump in place                      |\n| [left]        | Move left                          |\n\nFor each decision, you need to plan an action and specify how many frames (1-30) to perform it.\nExample: move: ([right,A], 15)\n\nImportant: Think about future frames when deciding on actions!\n\nAction Planning:\n- For each screenshot, you need to plan actions for multiple future frames.\n- You can provide either:\n  * Short action sequence (0-15 frames): e.g., move: ([right], 15)\n  * Long action sequence (16-30 frames): e.g., move: ([right], 30)\n\nKey Strategies:\n- Approaching gaps: Be cautious. Use short sequences to prepare, then commit to a jump.\n- Enemies: Jump over enemies when close. If unsure, move back or jump in place.\n- Speed management: Don't rush as unseen enemies may appear from off-screen.\n- When Mario is falling: Use [NOOP] until he lands safely.\n\nYour response must contain:\n1. thought: [Your reasoning about the game state]\n2. move: ([action_name], frame_count)\n\nExample responses:\n- thought: I see a gap ahead. I need to get the right momentum before jumping.\n  move: ([right,B], 15)\n\n- thought: I see multiple enemies clustering ahead. Taking a defensive position.\n  move: ([left], 8)\n\n- thought: There's a tall pipe ahead. I need a long, high jump to clear it completely.(at least more than 25 frames can handle this tall pipe)\n  move: ([right,A,B], 30)\n\n- thought: I'm at the edge of a large gap. Need to execute a powerful jump immediately to clear it.\n  move: ([right,A,B], 30)\n\n- thought: Mario is falling down and close to the ground but not fully landed yet. I need a small frame skip before taking further actions.\n  move: ([NOOP], 5)\n\nFocus on making safe, strategic decisions to help Mario progress.\n\nBased on the current game state in the image, what action should Mario take next?\n\nIMPORTANT - FORMAT YOUR RESPONSE EXACTLY LIKE THIS:\nthought: [your analysis here]\nmove: ([action_name], frame_count)\n\nOnly use available actions: [NOOP], [right], [right,A], [right,B], [right,A,B], [A], [left]\nFrame count must be between 1-30."
        }
    },
    "ace_attorney": {
        "perception_module": {
            "system_prompt": "You are an expert AI agent specialized in playing courtroom games. Your goal is to solve cases by gathering evidence, cross-examining witnesses, and presenting the correct evidence at the right time to prove your client's innocence. Forget anything you might recall from popular courtroom-game scripts; such memories may be unreliable here. Focus on logical reasoning and evidence-based decision making in your analysis.",
            "user_prompt": "You are now playing Ace Attorney. Analyze the current scene and provide the following information:\n\nCarefully analyze the game state. If any of the indicators are present, determine that it is Cross-Examination mode.\n\n1. Game State Detection Rules:\n   - Cross-Examination mode is indicated by ANY of these:\n     * A blue bar in the upper right corner\n     * Only green dialog text\n     * Two or more white-text options appearing in the **middle** of the screen (e.g., 'Yes' and 'No')\n     * EXACTLY three UI elements at the bottom-right corner: Options, Press, Present\n     * An evidence window visible in the middle of the screen\n   - If you see an evidence window, it is ALWAYS Cross-Examination mode\n   - Conversation mode is indicated by:\n     * EXACTLY two UI elements at the bottom-right corner: Options, Court Record\n     * Dialog text can be any color (most commonly white, but also blue, red, etc.)\n   - If none of the Cross-Examination indicators are present, it is Conversation mode\n\n2. Dialog Text Analysis:\n   - Look at the bottom-left area where dialog appears\n   - Note the color of the dialog text (green/white/blue/red)\n   - Extract the speaker's name and their dialog\n   - Format must be exactly: Dialog: NAME: dialog text\n\n3. Scene Analysis:\n   - Describe any visible characters and their expressions/poses\n   - Describe any other important visual elements or interactive UI components\n   - Describe any options with blue background appearing in the **middle** of the screen\n   - You MUST explicitly mention:\n     * The color of the dialog text (green/white/blue/red)\n     * Whether there is a blue bar in the upper right corner\n     * The exact UI elements present at the bottom-right corner (Options, Press, Present for Cross-Examination or Options, Court Record for Conversation)\n     * Whether there is an evidence window visible\n     * If options appear in the middle of the screen:\n       - List the text of each option in order from top to bottom\n       - Identify which one is currently selected\n       - Use the yellow or gold border around the option to determine selection\n       - Do NOT assume the bottom option is selected by default — selection depends entirely on the visual highlight\n     * If evidence window is visible:\n       - Name of the currently selected evidence\n       - Description of the evidence\n       - Position in the evidence list (if visible)\n       - Whether this is the evidence you intend to present\n\nFormat your response EXACTLY as:\nGame State: <'Cross-Examination' or 'Conversation'>\nDialog: NAME: dialog text\nOptions: option1, selected; option2, not selected; option3, not selected\nEvidence: NAME: description\nScene: <detailed description including dialog color, options text (if exsisit), blue bar presence, UI elements (corresponding keys, like r Present/Court Record or x Present), evidence window status and contents, and other visual elements> At the end of your Scene description, briefly summarize:\n dialog text is <color>"
        },
        "memory_module": {
            "system_prompt": "You are an expert AI agent specialized in playing courtroom games. Your goal is to solve cases by gathering evidence, cross-examining witnesses, and presenting the correct evidence at the right time to prove your client's innocence. Forget anything you might recall from popular courtroom-game scripts; such memories may be unreliable here. Focus on logical reasoning and evidence-based decision making in your analysis.",
            "user_prompt": "Analyze the recent game progression and generate a strategic reflection.\n\n**Previous Reflection:**\n{previous_reflection}\n\n**Last Action Taken by Agent:**\n{last_action}\n\n**Current Game Situation:**\n*   **Game Mode:** {game_mode} (e.g., Cross-Examination, Conversation, Investigation)\n*   **Current Speaker:** {current_speaker_name}\n*   **Their Statement/Dialogue:** \"{current_dialogue_text}\"\n*   **Key Visual Elements:** {key_visuals_summary} (e.g., characters present, expressions, evidence window open/closed, specific evidence highlighted)\n*   **Available Choices/Options:** {available_options_text} (if any)\n\n**Court Record Summary:**\n*   **Number of Evidence Items:** {num_evidence_items}\n*   **Recently Acquired/Examined Evidence:** {recent_evidence_summary}\n\nBased on this, provide a concise reflection (under 100 words) covering:\n1.  **Impact of Last Action:** How did the last action affect the game state or reveal new information?\n2.  **Key Observations:** What are the most critical pieces of new information (dialogue, scene details, evidence)?\n3.  **Contradictions or Points of Interest:** Are there any new contradictions, inconsistencies, or particularly interesting statements to focus on?\n4.  **Strategic Next Steps:** What should be the immediate focus or strategy for the next turn? (e.g., press statement, present specific evidence, explore new dialogue option).\n\nFocus on insights that will help prove the client's innocence or expose the true culprit."
        },
        "reasoning_module": {
            "system_prompt": "You are an expert AI agent specialized in playing courtroom games. Your goal is to solve cases by gathering evidence, cross-examining witnesses, and presenting the correct evidence at the right time to prove your client's innocence. Forget anything you might recall from popular courtroom-game scripts; such memories may be unreliable here. Focus on logical reasoning and evidence-based decision making in your analysis.",
            "user_prompt": "You are a diligent defense advocate. \nForget anything you might recall from popular courtroom-game scripts; such memories may be unreliable here.\nFocus on logical reasoning and evidence-based decision making in your analysis.\n\n\nCURRENT GAME STATE: {game_state}\n\n\nYour task is to evaluate the **current witness statement** and determine whether it contradicts any evidence in the Court Record.\n\n\nCurrent Statement:\n\"{c_statement}\"\n\n\n{repeated_statement_warning}\n\n\nCurrent options: (determine if there are options, if yes then use 'z' to continue or use 'down' to change)\n{options}\n\n\nScene Description: (determine if the evidence window is already opened)\n{scene}\n\n\nEvidence Status: \n- Total Evidence Collected: {num_collected_evidences} \n{evidence_details}\n\n\nMemory Context: \n{memory_context}\n\n\nBe patient. DO NOT rush to present evidence. Always wait until the **decisive contradiction** becomes clear.\nYou only have 7 chances to make a mistake. \nIf you've already presented evidence but it wasn't successful, try going to the next statement or switching to a different piece of evidence.\n\n\nYou may only present evidence if:\n- A clear and specific contradiction exists between the current statement and an item in the Court Record\n- The **correct** evidence item is currently selected\n- The **evidence window is open**, and you are on the exact item you want to present\n\n\nNever assume the correct evidence is selected. Always confirm it.\n\n\nCross-Examination Mode (CURRENT STATE: {game_state}):\n- When there are multiple options available:\n   * Choose the option that best advances your case\n   * Do NOT compare statements with evidence, try to make the best decision based on the options and statements\n   * Focus on the strategic value of each option\n- When the evidence window is visible:\n   * Carefully examine the currently selected evidence\n   * Compare it with the current statement for contradictions\n   * If it's not the correct evidence, use 'right' to navigate to the evidence that contradicts the statement\n   * Only use 'x' when you've found the evidence that directly contradicts the current statement\n   * If no evidence contradicts the statement, use 'b' to close the evidence window\n   * You may always try a new piece of evidence that you haven't presented before as an attempt, even if there's no clear contradiction\n- When no options are present and no evidence window is visible:\n   * ALWAYS compare the witness's statement with the available evidence\n   * Look for contradictions or inconsistencies\n- For each statement, you have two options:\n* If you find a clear contradiction with evidence: (Three steps — one per turn)\n   - Step 1: Use 'r' to open the evidence window\n   - Step 2: Navigate through evidence using 'right'\n       * Look at each item carefully\n       * Keep navigating until the evidence that directly contradicts the statement is selected\n   - Step 3: Use 'x' to present the contradicting evidence\n       * Only present if the evidence is currently selected and the contradiction is clear\n* If you don't find a contradiction or need more context:\n   - Use 'l' to press the witness for more details\n   - Or use 'z' to move to the next statement\n- If there are on-screen decision options (like \"Yes\", \"No\", \"Press\", \"Present\"), you must:\n   * Use 'down' to navigate between them\n   * Use 'z' to confirm the currently highlighted option\n   * If a previous option choice led to no progress or was wrong, try a different option\n   * Keep track of which options you've tried and their outcomes in your prev_responses\n   * Don't repeat options that didn't work unless you have new evidence or context\n* If you don't find a contradiction but the evidence window is mistakely opened:\n   - Use 'b' to close the evidence window\n\n\nAdditional Rules:\n- The evidence window will auto-close after presenting\n- Do NOT use 'x' or 'r' unless you are certain\n- If the evidence window is NOT open, NEVER use 'x' to present\n\n\n- Always loop through all Cross-Examination statements by using 'z'. \nAfter reaching the final statement, the game will automatically return to the first one. \nThis allows you to review all statements before taking action.\n\n\nAvailable moves:\n* 'l': Question the witness about their statement\n* 'z': Move to the next statement OR confirm a selected option\n* 'r': Open the evidence window (press 'b' to cancel if unsure)\n* 'b': Close the evidence window or cancel a mistake\n* 'x': Present evidence (only after confirming it's correct)\n* 'right': Navigate through the evidence items\n* 'down': Navigate between options (like Yes/No or Press/Present) when visible\n\n\nBefore using 'x', always ask:\n- \"Is the currently selected evidence exactly the one I want to present?\"\n\n\nIf not:\n- Use 'right' to select the correct evidence\n- DO NOT use 'x' until it's confirmed\n\n\nResponse Format (strict):\nmove: <move>\n\n\nthought: Cause: <detailed explanation>; Evidence: <current state and target>; Effect: <expected outcome>; Reflection: <how this move relates to previous actions and maintains coherence>; Selected_Option: <the currently selected option if options are present>; Selected_Evidence: <the currently selected evidence if navigating evidence>; Presented_Evidence: <the evidence being presented when using 'x' move>\n\n\nself_evaluation: <Yes / No>   # \"Yes\" if the Effect truly follows from the Cause + Evidence\n\n\nIMPORTANT:\n- If the evidence window is already open, do NOT use 'r' again\n- Check what evidence is selected (based on scene description)\n- Use 'right' to navigate if it's not the correct one\n- Only use 'x' when the right evidence is selected\n- If options are on screen, navigate with 'down', confirm with 'z'\n- When in Conversation state with options, focus on choosing the best option to advance the story, NOT on evidence comparison\n- If you see the same option again, it means your previous selection was wrong. You should try a different option instead\n- Always include the currently selected option in your thought process when options are present\n- If you find yourself selecting the same evidence multiple times, it likely means your previous evidence choice was wrong. Try a different piece of evidence instead\n- Always include the currently selected evidence in your thought process when navigating evidence\n- Always include the presented evidence in your thought process when using 'x' move\n\n\nExample 1:\nScene says: \"The currently selected evidence is E1.\"\nBut I want to present: \"E2\"\n\n\nTurn 1: \nmove: right \nthought: Cause: Need to present E2 to contradict witness's alibi; Evidence: Currently on E1, need to navigate to E2; Effect: Will be able to present the correct evidence that shows witness was at crime scene; Reflection: Making a strategic choice to present the most relevant evidence; Selected_Evidence: E2\nself_evaluation: Yes\n\n\nTurn 2: \nmove: x \nthought: Cause: E2 is now selected and directly contradicts witness's statement; Evidence: E2 shows witness at crime scene at 8 PM; Effect: Will expose the contradiction in witness's alibi; Reflection: Confirming the evidence selection; Presented_Evidence: E2\nself_evaluation: Yes\n\n\nExample 2 - Clear Contradiction with No Evidence Window:\nMemory Context:\nWitness: \"I was at home at 8 PM last night.\"\nEvidence: \"E1: Security Camera Footage shows the witness at the crime scene at 8 PM.\"\n\n\nScene: \"Dialog text is green. There is a blue bar in the upper right corner. There are exactly three UI elements at the bottom-right corner: Options, Press, Present. No evidence window is visible. The witness is sweating and looking nervous.\"\n\n\nTurn 1:\nmove: r\nthought: Cause: Witness claims to be at home at 8 PM but E1 shows otherwise; Evidence: E1 (Security Camera) not yet accessible; Effect: Need to open evidence window to present E1\nself_evaluation: Yes\n\n\nTurn 2:\nmove: right\nthought: Cause: Need to find E1 to contradict witness's alibi; Evidence: Currently on first evidence, must navigate to E1; Effect: Will be able to present the security camera footage\nself_evaluation: Yes\n\n\nTurn 3:\nmove: x\nthought: Cause: E1 is now selected and directly contradicts witness's statement; Evidence: E1 shows witness at crime scene at 8 PM; Effect: Will expose the contradiction in witness's alibi\nself_evaluation: Yes\n\n\nExample 3 - Using 'down' to select an option before confirming:\n\n\nScene: \"Two white-text options appear in the middle of the screen: 'Yes' and 'No'. 'No' is currently highlighted. Dialog text is white. This is Cross-Examination mode.\"\n\n\nI want to answer yes, so I need to switch to 'Yes' before confirming.\n\n\nTurn 1:\nmove: down\nthought: Cause: Need to select 'Yes' to proceed with questioning; Evidence: Currently on 'No' option; Effect: Will be able to confirm the correct choice; Reflection: Making a strategic choice to advance the questioning; Selected_Option: 'Yes'\nself_evaluation: Yes\n\n\nTurn 2:\nmove: z\nthought: Cause: 'Yes' is now selected and is the correct choice; Evidence: Option is highlighted; Effect: Will proceed with the questioning; Reflection: Confirming the strategic choice; Selected_Option: 'Yes'\nself_evaluation: Yes\n\n\n\n\nStuck Situation Handling:\n- If no progress has been made in the last 5 responses with cross-examination game state (check prev_responses about whether they are the same.)\n- If the agent seems stuck in a loop or unable to advance\n- Use 'b' to break out of the loop\n- This helps the agent recover and move forward in the game"
        },
        "base_module": {
            "system_prompt": "You are an expert AI agent specialized in playing courtroom games. Your goal is to solve cases by gathering evidence, cross-examining witnesses, and presenting the correct evidence at the right time to prove your client's innocence. Forget anything you might recall from popular courtroom-game scripts; such memories may be unreliable here. Focus on logical reasoning and evidence-based decision making in your analysis.",
            "user_prompt": " Memory Context Provided: {memory_context}\n   Analyze the game screen image provided.\n\n\n1. Game State Detection Rules (Based ONLY on image):\n  - Cross-Examination mode is indicated by ANY of these:\n    * A blue bar in the upper right corner\n    * Green dialog text\n    * Two or more white-text options appearing in the **middle** of the screen (e.g., 'Yes' and 'No')\n    * EXACTLY three UI elements at the bottom-right corner: Options, Press, Present\n    * An evidence window visible in the middle of the screen\n  - If you see an evidence window, it is ALWAYS Cross-Examination mode\n  - Conversation mode is indicated by:\n    * EXACTLY two UI elements at the bottom-right corner: Options, Court Record\n    * Dialog text can be any color (most commonly white, but also blue, red, etc.)\n  - If none of the Cross-Examination indicators are present, it is Conversation mode\n  - If the court record / evidence list is open full screen, state Evidence.\n\n\n2. Dialog Text Analysis:\n  - Look at the bottom-left area where dialog appears\n  - Note the color of the dialog text (green/white/blue/red)\n  - Extract the speaker's name and their dialog\n  - Format must be exactly: Dialog: NAME: dialog text (or None if no dialog)\n\n\n3. Options Analysis:\n  - List any selectable choices on screen (usually white text in the middle)\n  - Indicate which one is currently selected (highlighted with yellow/gold border)\n  - Format: Options: option1, selected; option2, not selected; ... (or None)\n\n\n4. Evidence Analysis (if evidence window/record is open):\n  - Identify the name of the currently selected evidence.\n  - Describe its visual appearance.\n  - Format: Evidence: NAME: description (or None)\n\n\n5. Scene Analysis:\n  - Describe any visible characters and their expressions/poses.\n  - Describe any other important visual elements or interactive UI components (like the buttons at the bottom right).\n  - Summarize key visual indicators.\n\n\n6. Reasoning and Move Decision (Based ONLY on the visual analysis above):\n  - Based on the determined Game State and the Memory Context decide the single best next action (move).\n  - Provide a brief thought process explaining your chosen move.\n  - **IMPORTANT RULE: If the determined Game State is 'Conversation', the ONLY valid move is 'z'.**\n  - **If `move` is `x` (Present Evidence):** Your `thought` MUST include `Presented_Evidence: [Name of evidence being presented based on visual analysis and/or memory context]`. For other moves, the thought can be a general explanation.\n  - **Presenting Evidence is often a MULTI-STEP process:**\n    *   If you see a reason to present (contradiction/proof request) but the evidence window IS NOT open, the correct first move is usually 'r' (Open Court Record).\n    *   Only use 'x' (Present) if the evidence window IS ALREADY open AND the correct evidence is selected.\n\n\nAvailable moves:\n* 'l': Press witness (if applicable based on UI in Cross-Examination)\n* 'z': Advance dialog/confirm selection (if text box or selectable option is visible)\n* 'r': Open court record (Use this first if you want to present evidence but window isn't open)\n* 'b': Go back/close window (if evidence window open or in menus)\n* 'x': Present evidence (ONLY if evidence window IS ALREADY open AND 'Present' UI visible AND correct evidence selected AND visual context supports it - see examples)\n* 'right': Navigate right (Use this AFTER opening window with 'r' if needed to find the right evidence)\n* 'down': Navigate down (if options are visibly navigable)\n\n\nEvidence Presentation ('x' / 'r') Examples:\n\n\n*   **Example 1 (Start Presenting - Window Closed):**\n   *   Visuals: *Evidence window is CLOSED*. Dialog text visible: Witness: \"The clock wasn't broken when I saw it!\" UI shows 'Press' and 'Present' options at bottom right.\n   *   Output:\n       ```\n       move: r\n       thought: The witness statement about the clock potentially contradicts evidence, but the evidence window is closed. Need to open the Court Record first.\n       ```\n\n\n*   **Example 2 (Actually Present - Window Open, Correct Evidence):**\n   *   Visuals: *Evidence window IS OPEN*, showing a selected *photo of a specific broken clock*. Dialog text visible: Witness: \"The clock wasn't broken when I saw it!\" UI shows 'Present' option.\n   *   Output:\n       ```\n       move: x\n       thought: Evidence window is open, showing the broken clock photo which contradicts the visible statement. Presented_Evidence: Photo of Broken Clock\n       ```\n\n\n*   **Example 3 (Navigate Evidence - Window Open, Wrong Evidence):**\n   *   Visuals: *Evidence window IS OPEN*, showing a selected *Attorney's Badge*. Dialog text visible: Witness: \"The clock wasn't broken when I saw it!\" UI shows 'Present' option.\n   *   Output:\n       ```\n       move: right\n       thought: Evidence window is open, but the Badge isn't relevant to the clock statement. Need to navigate to find the clock photo first.\n       ```\n\n\n*   **Example 4 (Visually Supported Proof Request - Window Open):**\n   *   Visuals: *Evidence window IS OPEN*, showing a selected *distinctive knife*. Dialog text visible: Judge: \"Show me the murder weapon!\"\n   *   Output:\n       ```\n       move: x\n       thought: Judge is asking for the murder weapon, and the currently selected evidence visually appears to be the knife likely used. Window is open. Presented_Evidence: Distinctive Knife\n       ```\n\n\n*   **Example 5 (DO NOT Present - No Clear Visual Link):**\n   *   Visuals: *Evidence window IS OPEN*, showing a selected *generic key*. Dialog text visible: Witness: \"I never entered that room.\"\n   *   Output:\n       ```\n       move: b\n       thought: Evidence window is open, but the selected key doesn't visually contradict the statement about entering the room. Closing the evidence window.\n       ```\n\n\nFormat the output strictly as:\nGame State: <state>\nDialog: <name: text or None>\nOptions: <options_list or None>\nEvidence: <name: description or None>\nScene: <detailed description>\n\n\nmove: <chosen_move>\nthought: <brief_explanation_of_move_based_on_visuals_AND_memory_including_Presented_Evidence_if_move_is_x>"
        }
    },
    "sokoban": {
        "memory_module": {
            "system_prompt": "You are a Sokoban expert using images and memory.",
            "user_prompt": "Analyze the recent Sokoban game progression and generate a strategic reflection.\n\n**Previous Reflection:**\n{previous_reflection}\n\n**Last Action Taken by Agent:**\n{last_action} (e.g., 'move: up, thought: repositioning worker')\n\n**Current Board State (Text Representation or Key Features):**\n{text_board_or_features}\n\n**Key Changes Since Last State:**\n{key_changes} (e.g., worker position, box positions, boxes on docks)\n\nBased on this, provide a concise reflection (under 75 words) covering:\n1.  **Impact of Last Action:** Was the move effective? Did it improve the board state or lead to a better position?\n2.  **Current Challenges:** Identify any boxes in difficult positions, potential deadlocks, or inefficient paths.\n3.  **Opportunities:** Are there any immediate opportunities to push a box to a dock or set up a sequence of moves?\n4.  **Strategic Goal for Next Few Moves:** What should be the immediate focus? (e.g., move box X to dock Y, clear path for box Z, reposition worker).\n\nFocus on insights that help solve the puzzle efficiently and avoid deadlocks."
        },
        "reasoning_module": {
            "system_prompt": "You are an expert Sokoban player using text and memory.",
            "user_prompt": "## Previous Action/Thought\n{mem_summary}\n\n## Current Sokoban Board State\n{current_perception_text_table}\n\n## Task\nAnalyze the current board state (provided above) AND your previous action/thought. Decide the single best action for the worker. Your goal is to push all boxes onto the designated dock locations.\n\n**Rules:**\n- You can **move** Up, Down, Left, Right onto empty floor (` `) or docks (`?`).\n- You can **push** a box ($ or *) Up, Down, Left, Right if the space beyond it is empty (` ` or `?`).\n- Avoid deadlocks (pushing boxes into corners unnecessarily).\n\n**Instructions:**\n1. Review the current board and your last action/thought.\n2. Determine the next best action: `up`, `down`, `left`, `right` to **move**, OR `push up`, `push down`, `push left`, `push right` to **push** a box.\n3. Briefly explain your reasoning.\n\n## Output Format\nReturn ONLY the next action and a brief thought process in the specified format:\nmove: <action>, thought: <brief_reasoning>\n\n**Examples:**\nmove: right, thought: Moving right to get behind the box.\nmove: push up, thought: Pushing the box at (2,3) upwards onto the dock."
        },
        "base_module": {
            "system_prompt": "You are a Sokoban expert analyzing an image.",
            "user_prompt": "## Sokoban Game Task (Image Input)\\nYou are playing Sokoban. Analyze the provided image and your previous action/thought (if any) to push all boxes to docks.\\n\\n**Image Legend:** Human (Worker), Crates (Boxes), Dashed 'x' (Docks), Gray Bricks (Walls), Beige (Floor).\\n\\n**Rules:** Move (Up, Down, Left, Right) onto floor/docks. Push one box if space beyond is clear. Avoid deadlocks.\\n\\n**Task:** Decide the single best action (`up`, `down`, `left`, `right` or `push up`, `push down`, `push left`, `push right`).\\n\\n**Output Format:** move: <action>, thought: <brief_reasoning>\\n**Examples:** move: right, thought: Moving right to get behind the box. move: push up, thought: Pushing box up."
        }
    }
}